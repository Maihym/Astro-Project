---
import '../styles/global.css'
import Header from '../components/Header'
import Footer from '../components/Footer'
import Analytics from '../components/Analytics'
import { getBusinessInfo, getCompanyInfo, getSEOInfo, getBookingInfo, getAnalyticsInfo } from '../config/business'

const businessInfo = getBusinessInfo()
const companyInfo = getCompanyInfo()
const seoInfo = getSEOInfo()
const bookingInfo = getBookingInfo()
const analyticsInfo = getAnalyticsInfo()

// Props for dynamic meta tags
export interface Props {
  title?: string
  description?: string
  keywords?: string[]
  image?: string
  url?: string
  type?: string
  author?: string
  publishedTime?: string
  modifiedTime?: string
  section?: string
  tags?: string[]
  // Structured data props
  service?: any
  city?: any
  reviews?: any[]
  breadcrumbs?: Array<{name: string, url: string}>
  faqs?: Array<{question: string, answer: string}>
}

const { 
  title = seoInfo.defaultTitle,
  description = seoInfo.defaultDescription,
  keywords = seoInfo.defaultKeywords,
  image = `${businessInfo.social.website}/logo.svg`,
  url = `${businessInfo.social.website}${Astro.url.pathname}`,
  type = 'website',
  author = seoInfo.author,
  publishedTime,
  modifiedTime,
  section,
  tags,
  // Structured data props
  service,
  city,
  reviews,
  breadcrumbs,
  faqs
} = Astro.props

// Generate dynamic structured data based on page type
function generateStructuredData() {
  const baseBusiness = {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": companyInfo.name,
    "description": companyInfo.description,
    "url": businessInfo.social.website,
    "telephone": businessInfo.contact.main.phone,
    "email": businessInfo.contact.main.email,
    "address": {
      "@type": "PostalAddress",
      "streetAddress": businessInfo.contact.main.address.street,
      "addressLocality": businessInfo.contact.main.address.city,
      "addressRegion": businessInfo.contact.main.address.state,
      "postalCode": businessInfo.contact.main.address.zip,
      "addressCountry": "US"
    },
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": "33.9172",
      "longitude": "-118.0120"
    },
    "openingHours": "Mo-Su 00:00-23:59",
    "priceRange": "$$",
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": "5.0",
      "reviewCount": "40"
    },
    "sameAs": [
      businessInfo.social.facebook,
      businessInfo.social.instagram,
      businessInfo.social.linkedin,
      businessInfo.social.yelp
    ].filter(Boolean)
  };

  // Service page schema
  if (service) {
    return {
      "@context": "https://schema.org",
      "@type": "Service",
      "name": service.title,
      "description": service.description,
      "provider": baseBusiness,
      "serviceType": "Electrical Services",
      "areaServed": city ? [city.name] : ["La Mirada", "Whittier", "Cerritos"],
      "hasOfferCatalog": {
        "@type": "OfferCatalog",
        "name": `${service.title} Services`,
        "itemListElement": service.features.map((feature: string, index: number) => ({
          "@type": "Offer",
          "itemOffered": {
            "@type": "Service",
            "name": feature
          },
          "position": index + 1
        }))
      },
      "offers": {
        "@type": "Offer",
        "priceRange": "$$",
        "availability": "https://schema.org/InStock",
        "validFrom": new Date().toISOString().split('T')[0]
      }
    };
  }

  // Default to LocalBusiness for all other pages
  return baseBusiness;
}

const structuredData = generateStructuredData();
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}

	// Make booking URLs available globally
	window.bookingUrls = {
		freeQuote: '${bookingInfo.freeQuote}',
		serviceCall: '${bookingInfo.serviceCall}',
		inspection: '${bookingInfo.inspection}'
	};
	window.dispatchEvent(new Event('bookingUrlsReady'));
</script>

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href={businessInfo.branding.favicon} />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords.join(', ')} />
		<meta name="author" content={author} />
		<meta name="robots" content="index, follow" />
		<meta name="language" content="en-US" />
		<meta name="revisit-after" content="7 days" />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content={type} />
		<meta property="og:url" content={url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={image} />
		<meta property="og:site_name" content={companyInfo.name} />
		<meta property="og:locale" content="en_US" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={image} />
		
		<!-- Additional Meta Tags -->
		<meta name="theme-color" content={businessInfo.branding.primaryColor} />
		<meta name="msapplication-TileColor" content={businessInfo.branding.primaryColor} />
		<meta name="mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="apple-mobile-web-app-title" content={companyInfo.name} />
		
		<!-- Canonical URL -->
		<link rel="canonical" href={url} />
		
		<!-- Google Search Console Verification -->
		{analyticsInfo.googleSearchConsoleId && (
			<meta name="google-site-verification" content={analyticsInfo.googleSearchConsoleId} />
		)}
		
		<!-- Structured Data -->
		<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
		
		<!-- Additional Structured Data Schemas -->
		
		<!-- Breadcrumb Schema -->
		{breadcrumbs && breadcrumbs.length > 0 && (
			<script type="application/ld+json" set:html={JSON.stringify({
				"@context": "https://schema.org",
				"@type": "BreadcrumbList",
				"itemListElement": breadcrumbs.map((crumb, index) => ({
					"@type": "ListItem",
					"position": index + 1,
					"name": crumb.name,
					"item": crumb.url
				}))
			})} />
		)}
		
		<!-- Review Schema -->
		{reviews && reviews.length > 0 && (
			<script type="application/ld+json" set:html={JSON.stringify({
				"@context": "https://schema.org",
				"@type": "LocalBusiness",
				"name": companyInfo.name,
				"aggregateRating": {
					"@type": "AggregateRating",
					"ratingValue": "5.0",
					"reviewCount": reviews.length.toString()
				},
				"review": reviews.slice(0, 5).map(review => ({
					"@type": "Review",
					"author": {
						"@type": "Person",
						"name": review.author
					},
					"reviewRating": {
						"@type": "Rating",
						"ratingValue": review.rating.toString()
					},
					"reviewBody": review.text,
					"datePublished": review.date
				}))
			})} />
		)}
		
		<!-- FAQ Schema -->
		{faqs && faqs.length > 0 && (
			<script type="application/ld+json" set:html={JSON.stringify({
				"@context": "https://schema.org",
				"@type": "FAQPage",
				"mainEntity": faqs.map(faq => ({
					"@type": "Question",
					"name": faq.question,
					"acceptedAnswer": {
						"@type": "Answer",
						"text": faq.answer
					}
				}))
			})} />
		)}
		
		<!-- Preconnect to external domains -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		
		<!-- Additional structured data for articles -->
		{type === 'article' && (
			<script type="application/ld+json" set:html={JSON.stringify({
				"@context": "https://schema.org",
				"@type": "Article",
				"headline": title,
				"description": description,
				"image": image,
				"author": {
					"@type": "Organization",
					"name": companyInfo.name
				},
				"publisher": {
					"@type": "Organization",
					"name": companyInfo.name,
					"logo": {
						"@type": "ImageObject",
						"url": `${businessInfo.social.website}/logo.svg`
					}
				},
				"datePublished": publishedTime,
				"dateModified": modifiedTime || publishedTime,
				"mainEntityOfPage": {
					"@type": "WebPage",
					"@id": url
				}
			})} />
		)}
	</head>
	<body>
		<Header client:load />
		<slot />
		<Footer client:load />
		<!-- Analytics Component -->
		<Analytics 
			client:load 
			pageTitle={title}
			pagePath={url}
		/>
		<!-- External script from public directory - proper Astro approach -->
		<script is:inline src="/scripts/booking.js"></script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
